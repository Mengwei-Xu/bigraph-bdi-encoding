# CAN Semantic Model from "Modelling and Verifying BDI Agents with Bigraphs. Xu et al"
# only agent-level rules are norm rules
# the rest of rules are instantenous rules
# the idea is that when an Reduce is added, 
# after the applications of all instantenous rules in the background, the next step is produced.  

## CONTROLS

ctrl Check = 0;
ctrl Del = 0;
ctrl Add = 0;
atomic ctrl T = 0; # true
atomic ctrl F = 0; # false

ctrl Intentions = 0;
ctrl Intent = 1;

ctrl Desires = 0;

ctrl Beliefs = 0;
atomic fun ctrl B(n) = 0;

ctrl Reduce = 0;
atomic ctrl ReduceF = 0;

ctrl Act = 0;
ctrl Pre = 0;

ctrl Event = 1;

ctrl Plans = 0;
ctrl PlanSet = 1;
ctrl Plan = 0;
ctrl PB = 0;

# Tree
ctrl Try = 0; #OR-Like
ctrl Seq = 0; #AND-Like
ctrl Cons = 0;

ctrl Conc = 0;
ctrl L = 0;
ctrl R = 0;

# CheckToken can be discarded if we are verbose in the related rules
atomic ctrl CheckToken = 0;

ctrl Goal = 0;
ctrl SC = 0;
ctrl FC = 0;


# Nil for 1 
atomic ctrl Nil = 0;

# Try for special case:
ctrl Trys = 0;


# Control for tracking the cycle of the agent step
ctrl Cycle = 0;
atomic fun ctrl Num(n) = 0;

# Control for the environment perspective
ctrl Environment = 0;
atomic ctrl Unperceived = 0;
atomic ctrl Perceived = 0;
atomic ctrl Unupdated = 0;
atomic ctrl Updated = 0;

# Control for counting waiting step
ctrl Wait = 0;


# Controls for giving the identifier to the event (which is also for the related intention)
# event, plan, and action identifier
ctrl Identifier = 0;
# keep the EId(n) atomic for now
atomic fun ctrl EId(n) = 0;
# atomic fun ctrl PId(n) = 0;
# atomic fun ctrl AId(n) = 0;


# Controls for the status of the event
atomic ctrl Pending = 0;
atomic ctrl Active = 0;
atomic ctrl Failure = 0;
atomic ctrl Success = 0;
atomic ctrl Suspended = 0;
atomic ctrl Discarded = 0;
# the operation between these status
##### Activate(event) 
# {Pending} to {Active} is already covered by the rule a_event (event selection)
##### Terminate(event) after success or failure 
# {Active} to {Success, Failure} is already done by CAN semantics
##### Terminate(event) without reaching success or failure (e.g. no longer needed)
# {Pending, Active, Suspended} to {Discarded} will be done by Discarded method
##### Suspend(event) 
# {Pending, Active} to {Suspended} will be done by Suspend method
##### Resume(event)
# {Suspended} to {Pending, Active} will be done by Resume method
#  1. Suspended to Pending is the case an event is not even active (i.e. not in intention) when suspended.
#  2. Suspended to Active is the case an event is active (i.e. progressed in intention) when suspended. 
##### Adopt(event)
# an event from external environment to an external event in the desire set will be done by the Adopt method
# the Adopt method does is to add the Pending state to an event origining from external environment

# human can issue those commands above in the form of environment update
# then agents can add such commands in the beliefs to triggering the further deliberation
# the following is the command controls, which are all under the general command control

ctrl Discard = 0;
ctrl Suspend = 0;
ctrl Resume = 0;
ctrl Adopt = 0;


## END Controls

# Check contains the formula to be checked against the belief base
# Check cannot be nested under the Beliefs 
# as it will cause problems in the rule check_F(n) when declared as instan rules.
# when there are some same formulas in two different check due to our weak condition check
# Instead I nest Check under the entity (e.g. plans) for which the check is needed
# and giving the final check result as child of Check
# thus no link and no CheckRes control needed

fun react check_T(n) =
    Beliefs.(B(n) | id) || Check.(B(n) | id)
    -[1]->
    Beliefs.(B(n) | id) || Check.id;

react check_end =
    Beliefs.id || Check.1
    -[1]->
    Beliefs.id || Check.T;

fun react check_F(n) =
    Beliefs.id || Check.(B(n) | id)
    -[1]->
    Beliefs.id || Check.F
    @[0] if !B(n) in param;


# now the action effects are applied in the Environment instead
fun react add_notin(n) =
    Environment.(Add.(B(n) | id) | id)
    -[1]->
    Environment.(Add.id | B(n) | id) @[0,1] if !B(n) in param;

fun react add_in(n) =
    Environment.(Add.(B(n) | id) | B(n) | id)
    -[1]->
    Environment.(Add.id | B(n) | id) @[0,1];

react add_end =
    Environment.(Add.1 | id)
    -[1]->
    Environment.id;

fun react del_in(n) =
    Environment.(Del.(B(n) | id) | B(n) | id)
    -[1]->
    Environment.(Del.id | id);

fun react del_notin(n) =
    Environment.(Del.(B(n) | id) | id)
    -[1]->
    Environment.(Del.id | id) if !B(n) in param;

react delete_end =
    Environment.(Del.1 | id)
    -[1]->
    Environment.id @[0];



# also since once a command is perceived, it will be removed from the environment
# so i do not need to worry about the deleting side of command operations
# this rule is to add the command instructions from humans.
# it has the lower priority than any of rule above
# so that when all belief atoms are updated, all instructions will simply be added at one go.  
react add_commands_update =
    Environment.(Add.id | id)
    -[1]->
    Environment.(id | id);

## END Beliefs

## Core actions
react act_check =
  Reduce.Act.(Pre.id | Add.id | Del.id)
  -[1]->
  Reduce.Act.(Pre.id | Add.id | Del.id | Check.id)
  @[0,1,2,0];

# Reduce is swallowed here
# but instan rules for belief adding and deletion operator still apply 
react act_T =
     Environment.id
  || Reduce.Act.(id | Add.id | Del.id | Check.T)
  -[1]->
     Environment.(id | Add.id | Del.id)
  || Nil
  @[0,2,3];

# Reduce is swallowed here
# but ReduceF will still have to be picked up by the failure recovery rules 
react act_F =
  Reduce.Act.(id | Check.F)
  -[1]->
  ReduceF @[];

# Event
# Reduce is swallowed here and has to be added again for next agent step
react reduce_event =
    Reduce.Event{ps}.1
 || Plans.(PlanSet{ps}.id | id)
 -[1]->
    PlanSet{ps}.id
 || Plans.(PlanSet{ps}.id | id)
 @[0,0,1];

# Plan Selection
# CheckToken can be discarded if we enumerate all components of Plan
react select_plan_check =
    Reduce.PlanSet{ps}.(Plan.(Pre.id | CheckToken | id) | id)
 -[1]->
    Reduce.PlanSet{ps}.(Plan.(Pre.id | Check.id | id) | id)
  @[0,0,1,2];

# Reduce is swallowed here and has to be added again for next agent step
react select_plan_T =
    Reduce.PlanSet{ps}.(Plan.(Pre.id | Check.T | PB.id) | id)
  -[1]->
    Try.(id | Cons.PlanSet{ps}.id) @[1,2];

# Reduce is swallowed here
# but ReduceF will still have to be picked up for the failure recovery rule
# or picked up by the intention failure rule
react select_plan_F =
    Reduce.PlanSet{ps}.id
  -[1]->
    ReduceF | {ps} @[]
    if !CheckToken in param, !Check.T in param;

react reset_planset =
  Try.(id | Cons.PlanSet{ps}.(Plan.(Check.id | id) | id))
  -[1]->
  Try.(id | Cons.PlanSet{ps}.(Plan.(CheckToken | id) | id))
  @[0,2,3];

react init_plansets =
  Plans.(PlanSet{ps}.(Plan.(Pre.id | PB.id) | id) | id)
  -->
  Plans.(PlanSet{ps}.(Plan.(CheckToken | Pre.id | PB.id) | id) | id);

## Sequencing
react reduce_seq =
  Reduce.Seq.(id | Cons.id)
  -[1]->
  Seq.(Reduce.id | Cons.id);

react seq_succ =
  Reduce.Seq.(Nil | Cons.id)
  -[1]->
  Reduce.id;

# this rule is rather artifical and purely intermedia for better structural update
react seq_fail =
  Seq.(ReduceF | Cons.id)
  -[1]->
  ReduceF @[];

## Failure Recovery
react try_seq =
  Reduce.Try.(id | Cons.id)
  -[1]->
  Try.(Reduce.id | Cons.id);

react try_succ_unique =
  Try.(Nil | Cons.id)
  -[1]->
  Trys.(Nil | Cons.id);

react try_succ =
  Reduce.Trys.(Nil | Cons.id)
  -[1]->
  Nil @[];

react try_failure =
  Try.(ReduceF | Cons.id)
  -[1]->
  Reduce.id;



# Concurrency
# all instan rules
react conc_nil_R=
  Reduce.Conc.(L.Nil | R.id)
  -[1]->
  Conc.(L.Nil | R.Reduce.id);

react conc_nil_L =
  Reduce.Conc.(L.id | R.Nil)
  -[1]->
  Conc.(L.Reduce.id | R.Nil);

react conc_L =
  Reduce.Conc.(L.id | id)
  -[1]->
  Conc.(L.Reduce.id | id);

react conc_R =
  Reduce.Conc.(R.id | id)
  -[1]->
  Conc.(R.Reduce.id | id);

react conc_succ =
  Reduce.Conc.(L.Nil | R.Nil)
  -[1]->
  Nil;

react conc_fail_L =
  Conc.(L.ReduceF | id)
  -[1]->
  ReduceF @[];

react conc_fail_R =
  Conc.(R.ReduceF | id)
  -[1]->
  ReduceF @[];


# Declarative goals #
# all instan rules
react goal_check =
  Reduce.Goal.(SC.id | id | FC.id)
   -[1]->
  Reduce.Goal.(SC.(id | Check.id) | id | FC.(id | Check.id))
  @[0,0,1,2,2]
  if !Check in param;

react goal_suc =
  Reduce.Goal.(SC.(id | Check.T) | id)
  -[1]->
  Nil @[];

react goal_fail =
  Reduce.Goal.(FC.(id | Check.T) | id)
  -[1]->
  Act.(Pre.F | Add.1 | Del.1) @[];

react goal_init =
  Reduce.Goal.(SC.(id | Check.F) | id | FC.(id | Check.F))
  -[1]->
  Goal.(SC.id | Try.(id | Cons.id) | FC.id)
  @[0,1,1,2]
  if !Try in param, !Trys in param;

react goal_reduce =
  Reduce.Goal.(SC.(id | Check.F) | Try.(id | Cons.id) | FC.(id | Check.F))
  -[1]->
  Goal.(SC.id | Try.(Reduce.id | Cons.id) | FC.id);

react goal_persist_nil =
  Reduce.Goal.(SC.(id | Check.F) | Trys.(Nil | Cons.id) | FC.(id | Check.F))
  -[1]->
  Goal.(SC.id | Try.(id | Cons.id) | FC.id)
  @[0,1,1,2];

react goal_persist =
  Reduce.Goal.(SC.(id | Check.F) | Try.(ReduceF | Cons.id) | FC.(id | Check.F))
  -[1]->
  Goal.(SC.id | Try.(id | Cons.id) | FC.id)
  @[0,1,1,2];


# Agent-Level Steps
# all normal rules
# Constraint intention_step < {intention_step, intention_done_succ}
# after the main agent-level step, the environment is reset
# to be Unperceived to allow the new perceiving process
# now the event has the status and identifier as well

# the rule a_event is also considered as one step in agent deliberation process

react a_event =
     Desires.(id | Event{e}.(Pending | id))
  || Intentions.id
  || Beliefs.(id | Cycle.Num([n, $ >= 0]))
  || Environment.(id | Updated | Perceived)
  -[1]->
     Desires.(id | Event{e}.(Active | id))
  || Intentions.(id | Intent{e}.(Event{e}.1 | id))
  || Beliefs.(id | Cycle.Num({n+1}))
  || Environment.(id | Unupdated | Unperceived)
  @[0,1,2,1,3,4];



react intention_step =
     Desires.(id | Event{e}.(Active | id))
  || Intent{e}.(Identifier.id | id)
  || Beliefs.(id | Cycle.Num([n, $ >= 0]))
  || Environment.(id | Updated | Perceived)
  -[1]->
     Desires.(id | Event{e}.(Active | id))
  || Intent{e}.(Identifier.id | Reduce.id)
  || Beliefs.(id | Cycle.Num({n+1}))
  || Environment.(id | Unupdated | Unperceived);


react intention_done_F =
     Desires.(id | Event{e}.(Active | id))
  || Intent{e}.(Identifier.id | Reduce.ReduceF)
  -[1]-> 
     Desires.(id | Event{e}.(Failure | id))
  || 1
  @[0,1];

react intention_done_succ =
     Desires.(id | Event{e}.(Active | id))
  || Intent{e}.(Identifier.id | Reduce.Nil)
  -[1]-> 
     Desires.(id | Event{e}.(Success | id))
  || 1
  @[0,1];

# wait function 
fun react waiting(n) =
     Beliefs.(id | Wait.Num(n) | Cycle.Num([m, $ >= 0]))
  || Environment.(id | Updated | Perceived)
  -[1]->
     Beliefs.(id | Wait.Num(n+1) | Cycle.Num({m+1}))
  || Environment.(id | Unupdated | Unperceived);



# the manipulation of the external event status should be considered as agent reasoning part
# also it needs to have higher priority than the rest of CAN agent-level steps
# it implied that the agent will actually progress any individual intention
# untile the status of events becomes stable
# it also needs to flip the environment from Updated/Perceived to Unupdated/Unperceived
# for some practical reason, i can just put them as instan rules
# and they will contribution to the progress of agent step counting 

## Adopt.EId(n)
fun react adopt_new_external_events(n) = 
       Beliefs.(Adopt.(EId(n) | id) | id)
    || Desires.id
    -[1]->
       Beliefs.(Adopt.id | id)
    || Desires.(/l Event{l}.(Pending | Identifier.EId(n)) | id);


fun react link_new_events_plans(n) =
           Desires.(/l Event{l}.(Pending | Identifier.EId(n)) | id)
        || PlanSet{e}.(Identifier.EId(n) | id)
        -[1]->
           Desires.(Event{e}.(Pending | Identifier.EId(n)) | id)
        || PlanSet{e}.(Identifier.EId(n) | id);

## Suspend.EId(n)
fun react suspend_external_events(n) = 
       Beliefs.(Suspend.(EId(n) | id) | id)
    || Desires.(id | Event{e}.(id | Identifier.EId(n)))
    -[1]->
       Beliefs.(Suspend.id | id)
    || Desires.(id | Event{e}.(Suspended | Identifier.EId(n))) 
    @[0,1,2];  


## Discard.EId(n)
# discard an external event with an already progressed intention
fun react discard_external_events_with_intentions(n) = 
       Beliefs.(Discard.(EId(n) | id) | id)
    || Desires.(id | Event{e}.(Active | Identifier.EId(n)))
    || Intent{e}.id
    -[1]->
       Beliefs.(Discard.id | id)
    || Desires.(id | Event{e}.(Discarded | Identifier.EId(n))) 
    || 1 
    @[0,1,2];  

# discard an external event which has not been progressed at all. 
fun react discard_external_events_without_intentions(n) = 
       Beliefs.(Discard.(EId(n) | id) | id)
    || Desires.(id | Event{e}.(Pending | Identifier.EId(n)))
    -[1]->
       Beliefs.(Discard.id | id)
    || Desires.(id | Event{e}.(Discarded | Identifier.EId(n))); 



## Resume.EId(n)

fun react resume_external_events_to_pending(n) = 
       Beliefs.(Resume.(EId(n) | id) | id)
    || Desires.(id | Event{e}.(Suspended | Identifier.EId(n)))
    || Intentions.id
    -[1]->
       Beliefs.(Resume.id | id)
    || Desires.(id | Event{e}.(Pending | Identifier.EId(n))) 
    || Intentions.id if !Intent{e}.id in param; 


fun react resume_external_events_to_active(n) = 
       Beliefs.(Resume.(EId(n) | id) | id)
    || Desires.(id | Event{e}.(Suspended | Identifier.EId(n)))
    || Intent{e}.id
    -[1]->
       Beliefs.(Resume.id | id)
    || Desires.(id | Event{e}.(Active | Identifier.EId(n)))
    || Intent{e}.id; 

# house keeping for removing the empty commands in the belief base
react adopt_empty = Beliefs.(Adopt.1 | id) -[1]-> Beliefs.id;
react resume_empty = Beliefs.(Resume.1 | id) -[1]-> Beliefs.id;
react discard_empty = Beliefs.(Discard.1 | id) -[1]-> Beliefs.id;
react suspend_empty = Beliefs.(Suspend.1 | id) -[1]-> Beliefs.id;

# Perceive operation
# i will have to put it in the instan rules 
# and add the control token so that it is only applied once per cycle
# it has the lowest priority to ensure the reduction is fully perform 
# before the perceiving process kicks in
# also because we have plan selection and concurent L or R to be shown 
# in the transition system
# so the agent will only perceive when one agent step is finished


react perceive_environment =
       Environment.(Unperceived | Updated | id) 
    || Beliefs.(Cycle.id | Wait.id | id)
    -[1]->
       Environment.(Perceived | Updated | id) 
    || Beliefs.(Cycle.id | Wait.id | id)
    @[0,1,2,0] if !Reduce in ctx;   


# some house keeping as well for environment after perceiving
# to remove the perceived human instructions
# the key reason is the difference nature of environment update
# one is physical which stays
# one is messages which should be deleted once received

react env_adopt_cleaning =        
        Environment.(Perceived | Updated | Adopt.id | id) 
    -[1]->
        Environment.(Perceived | Updated | 1 | id) 
        @[1];


react env_resume_cleaning =        
        Environment.(Perceived | Updated | Resume.id | id) 
    -[1]->
        Environment.(Perceived | Updated | 1 | id) 
        @[1];

react env_discard_cleaning =        
        Environment.(Perceived | Updated | Discard.id | id) 
    -[1]->
        Environment.(Perceived | Updated | 1 | id) 
        @[1];


react env_suspend_cleaning =        
        Environment.(Perceived | Updated | Suspend.id | id) 
    -[1]->
        Environment.(Perceived | Updated | 1 | id) 
        @[1];


# ideally i should have a general rule for environment update
# however in practice, i only need to fire up some environment update at some step
# afterall, i need to know at which step to fire up which update
# also in the general case, the amount of initial knowledge declaration is repetitive
# as at most of step it would be no update
# and this amount of environmental update knowledge declaration is going to be a nightmare
# to be shown in svg format which makes different to debug
# so for now, i will just give each individual rule for targeted agent cycle environment update



#### WATCT OUT ####
### make sure each cycle number has an update when testing
### otherwise it will stop there as the environment needs to be flipped with token of Updated for next agent step


# the initial environment update of the retrivial model 
react initial_update_patrol =
         Beliefs.(Cycle.Num(0) | id)
      || Environment.(Unupdated | id)   
      -[1]->
         Beliefs.(Cycle.Num(0) | id)
      || Environment.(Updated | id | Add.(B("battery_high") | B("good_weather")));  

# after patrolling for a while the targeted object is targeted 
react detection_update_patrol =
         Beliefs.(Cycle.Num(19) | id)
      || Environment.(Unupdated | id)   
      -[1]->
         Beliefs.(Cycle.Num(19) | id)
      || Environment.(Updated | id | Add.B("detected"));  


# the rest of empty update 
react empty_update_patrol =
         Beliefs.(Cycle.Num([n, $ != 0 && $ != 19]) | id)
      || Environment.(Unupdated | id)   
      -[1]->
         Beliefs.(Cycle.Num({n}) | id)
      || Environment.(Updated | id);  









# now all beliefs need to have the Cycle.Num(0) as an initial belief atom  
# now we have the initial declaration of the environment first
# then the environment is perceived by the agent in the Beliefs 
# the initial value of the environment also containts Unperceived

# # # # UAV case ####
# there are three situations i am interested in 
# 1. if the targeted object is not detected, then the drone will keep partolling
# 2. if the targeted object is not detected, but the battery becomes low, the drone will get recharged and carry on partrolling
# 3. if the targeted object is not detected, but the weather becomes harsh, the drone will park itself safely and 
#    wait the weather becomes good again to consume its patrolling
# 4. if the targeted object is detected, battery is not low, and weather is good, then it will report and return
# 5. if the targeted object is detected, but battery is low, it will ask for recharging before heading back
# 6. if the targeted object is detected, but weather is harsh, it will park itself self and wait until it is safe to head back




# the first time when the first round of patrolling is completed (throught the execution of action patrol)
# is the reasoning cycle 10
# the cycle is repeating to patrol in every 5 steps


big report_return = Act.(Pre.(B("battery_high") | B("good_weather")) | Del.1 | Add.1);
big patrol = Act.(Pre.1 | Del.1 | Add.B("flying"));
big request = Act.(Pre.1 | Del.1 | Add.1);
big wait = Act.(Pre.1 | Del.1 | Add.1);
big charge = Act.(Pre.1 | Del.(B("pause_signal") | B("battery_low")) | Add.B("battery_high"));
big activate_parking = Act.(Pre.1 | Del.B("flying") | Add.B("parked"));



big model_patrolling = 
        Environment.(Unperceived | Unupdated)
     || Beliefs.(Cycle.Num(0) | Wait.Num(0))
     || Desires.Event{e1}.(Pending | Identifier.EId(1))
     || Intentions.1
     || Plans.(
            PlanSet{e1}.(
            Plan.(Pre.1 | PB.Seq.(Goal.(SC.(B("battery_high") | B("good_weather") | B("detected")) | Event{e2}.1 | FC.F) | Cons.report_return))
            )
            | PlanSet{e2}.(
              Plan.(Pre.1 | PB.Seq.(Goal.(SC.B("pause_signal") | Event{e3}.1 | FC.F) | Cons.Event{e4}.1))
            )
            | PlanSet{e3}.(
              Plan.(Pre.1 | PB.patrol)
            )
            | PlanSet{e4}.(
                Plan.(Pre.B("battery_low") | PB.Seq.(request | Cons.Seq.(wait | Cons.charge)))
              | Plan.(Pre.(B("harsh_weather") | B("flying")) | PB.Seq.(activate_parking | Cons.wait))
              | Plan.(Pre.(B("harsh_weather") | B("parked")) | PB.wait)
            )
          );






begin brs
    string n = {"battery_high", "good_weather", "detected", "pause_signal", "battery_low", "harsh_weather", "flying"};

    # cap for the external event number 
    int ecap = 20;
    int en = [0:1:ecap]; 

    # cap for the waiting step 
    int wcap = 9;
    int wn = [0:1:wcap];   

    init model_patrolling;


    rules = [

            # link the newly added external events with their relevant plans
            (link_new_events_plans(en)),

            # house keeping for empty commands in the beliefs
            (adopt_empty, resume_empty, discard_empty, suspend_empty),

            # houaw keeping for cleaning commands in the environment after perception
            (env_adopt_cleaning, env_resume_cleaning, env_discard_cleaning, env_suspend_cleaning),

            # change to Trys control
            (try_succ_unique),

            # add CheckToken for all initial user-specified plans    
            (init_plansets),

            # Plan selection token housekeeping
            (reset_planset),

            # Atomic set ops
            ( check_T(n),
              check_end, 
              check_F(n), 
              add_notin(n), 
              add_in(n),
              add_end,
              del_in(n), 
              del_notin(n),
              delete_end
            ),
            
            # add command instructions when done with the belief atoms revision
            (add_commands_update),

            # actually reduce the programs
            ( reduce_event,
              act_check,
              select_plan_check,
              goal_check
            ),

            # the follow-up of the above actual reduction of the programs 
            ( act_T,
              act_F,
              select_plan_F,
              goal_suc,
              goal_fail,
              goal_init
            ),

            # special cases of rules specifying how the AND/OR tree is explored excluding those having ReduceF
            (conc_succ, goal_persist_nil),

            # conc_succ has to have a higher priority than both conc_nil_L and conc_nil_R           
            (conc_nil_L, conc_nil_R), 

            (seq_succ), 
            (try_succ),

            # special cases of rules to specify how the AND/OR tree should be explored for handling ReduceF
            (goal_persist, conc_fail_L, conc_fail_R),
            (seq_fail),
            (try_failure),

            # non-special cases of rules to specify how the AND/OR tree should be explored
            # rule conc_L and conc_R need to be the normal rules if concurrency is ever used
            (goal_reduce),       
            (reduce_seq),  
            (try_seq),
            
            # special cases of agent level operation
            # they do not need to be normal rules
            (intention_done_succ, intention_done_F),


            # the environmental update has higher priority as it proceeds before perceiving
            # the environment update rules for the retrivial model

            (
            initial_update_patrol,
            empty_update_patrol,
            detection_update_patrol
             ),


            # the step for the perceiving process
            (perceive_environment),

            # the group of rules for event status manipulations
            (           
            discard_external_events_with_intentions(en),
            discard_external_events_without_intentions(en),
            adopt_new_external_events(en), 
            suspend_external_events(en),   
            resume_external_events_to_pending(en),
            resume_external_events_to_active(en)
            ),

            # non-determinism of rules which have to be a normal rule to allow branching
            {select_plan_T, conc_L, conc_R},


            # non-special cases of agent level operation
            {a_event, intention_step},

            # finally the waiting operation serving as passive sensory devices
            {waiting(wn)}
            ];
end
